#
# Demo chemistry atom types.
#
# This file is quite complex. It has five major sections:
# -- Auto-generating the c++, scheme and python wrappers from the
#    master type defintion file.
# -- Building the C++ library holding the needed type machinery.
# -- Building a guile scheme module
# -- Building a python module
# -- Installing all of the above into the root filesystem.
#
# --------------------------------------------------------------
# Part One: Build the various language wrappers.
#
# The `chem_types.script` file defines the types; the other three files
# are c++ files that are autogenerated in the build directory.
OPENCOG_GEN_CXX_ATOMTYPES(chem_types.script
   chem_types.h
   chem_types.definitions
   chem_types.inheritance)

# As above, but the guile scheme bindings are generated.
OPENCOG_GEN_SCM_ATOMTYPES(chem_types.script chem_types.scm)

# Same, for Python.
OPENCOG_GEN_PYTHON_ATOMTYPES(chem_types.script chem_types.pyx)

# A "phony" target, which can be used in other places to guarantee
# that the bindings are built before any code that uses the bindings.
# For example, this is used in the `apps` CMakefile, to make sure that
# the types are built before the apps.
ADD_CUSTOM_TARGET(chem_demo_atom_types
	DEPENDS chem_types.h chem_types.scm chem_types.pyx)

# For OCaml, see the `ocaml` subdirectory in the main project.
# Building the OCaml bindings is more complex. Note that, in
# general, OCaml and AtomSpace class in the notion of a type:
# OCaml want all types to be compile-time types, whereas the
# the AtomSapce defines them at runtime (and does a lot of
# run-time type-casting). This is at odds to OCaml, and an
# elegant solution to allowing these two systems to co-exist
# has not yet been invented.

# --------------------------------------------------------------
# Part Two: Build the C++ library
#
# The chem_types.h file is written to the build directory
INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})

# This will build the `libchem-types.so` shared libary containing all
# the needed machinery to make things work.
ADD_LIBRARY (chem-demo-types SHARED
   chem_types.h
   ChemTypes.cc
)

# Without this, parallel make will race and attempt to build the
# shared library before the needed generated files are creted!
ADD_DEPENDENCIES(chem-demo-types chem_demo_atom_types)

# Add linking targets for the library.
TARGET_LINK_LIBRARIES(chem-demo-types
   ${ATOMSPACE_atomtypes_LIBRARY}
)

# --------------------------------------------------------------
# Part Three: Build the scheme module
#
# The AtomSpace unit-test infrastructure allows the unit tests
# to be run *before* installing files into the filesystem. The
# price for this is the need for the following two directives,
# which tell scheme were to find modules in the build directory.

DECLARE_GUILE_CONFIG_TARGET(CHEMODEMO_CONFIG
	"opencog chemodemo-config" "FOO_TEST")

ADD_GUILE_EXTENSION(CHEMODEMO_CONFIG
	chem-demo-types "opencog-ext-path-chemodemo")

WRITE_GUILE_CONFIG(
   ${GUILE_BIN_DIR}/opencog/chemodemo-config.scm
   CHEMODEMO_CONFIG TRUE
)

WRITE_GUILE_CONFIG(
   ${GUILE_BIN_DIR}/opencog/chemodemo-config-installable.scm
   CHEMODEMO_CONFIG FALSE
)

# Define and install the actual guile module
ADD_GUILE_MODULE (FILES
   demo-types.scm
   MODULE_DESTINATION "${GUILE_SITE_DIR}/opencog/demo-types"
)

# --------------------------------------------------------------
# Part Four: Build the Python module

# --------------------------------------------------------------
# Part Five: Install the demo system into the root file system.
#
INSTALL (FILES
   ${CMAKE_CURRENT_BINARY_DIR}/chem_types.h
   DESTINATION "include/opencog/demo-types"
)

INSTALL (FILES
   ${CMAKE_CURRENT_BINARY_DIR}/chem_types.scm
   DESTINATION "${GUILE_SITE_DIR}/opencog/demo-types/"
)

INSTALL(
   FILES ${GUILE_BIN_DIR}/opencog/chemodemo-config-installable.scm
   DESTINATION ${GUILE_SITE_DIR}/opencog
   RENAME chemodemo-config.scm
)

# The below allows you to install the above by saying
# `sudo make install-demotypes`
ADD_CUSTOM_TARGET (install-demotypes
	DEPENDS examples
	WORKING_DIRECTORY .
	COMMAND $(MAKE) install
	COMMENT "Installing examples ..."
)

# --------------------------------------------------------------
