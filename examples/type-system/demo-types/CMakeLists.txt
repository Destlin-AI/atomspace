#
# Demo chemistry atom types.
#
# The `chem_types.script` file defines the types; the other three files
# are c++ files that are autogenerated in the build directory.
OPENCOG_GEN_CXX_ATOMTYPES(chem_types.script
   chem_types.h
   chem_types.definitions
   chem_types.inheritance)

# As above, but the guile scheme bindings are generated.
OPENCOG_GEN_SCM_ATOMTYPES(chem_types.script chem_types.scm)

# Same, for Python.
OPENCOG_GEN_PYTHON_ATOMTYPES(chem_types.script chem_types.pyx)

# Use UseOCaml.cmake, provided by cogutils
INCLUDE(UseOCaml)

# Same, but for OCaml. The `chem_types.h` file is the same file
# as generated above.
OPENCOG_GEN_OCAML_ATOMTYPES(chem_types.script
	chem.ml chemwrappers.cc chem_types.h)

# A "phony" target, which can be used in other places to guarantee
# that the bindings are built before any code that uses the bindings.
# For example, this is used in the `apps` CMakefile, to make sure that
# the types are built before the apps.
ADD_CUSTOM_TARGET(chem_demo_atom_types
	DEPENDS chem_types.h chem_types.scm chem_types.pyx chem_types.ml)

# The chem_types.h file is written to the build directory
INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})

# This will build the `libchem-types.so` shared libary containing all
# the needed machinery to make things work.
ADD_LIBRARY (chem-demo-types SHARED
   chem_types.h
   ChemTypes.cc
)

# Without this, parallel make will race and attempt to build the
# shared library before the needed generated files are creted!
ADD_DEPENDENCIES(chem-demo-types chem_demo_atom_types)

# Add linking targets for the library.
TARGET_LINK_LIBRARIES(chem-demo-types
   ${ATOMSPACE_atomtypes_LIBRARY}
)

# --------------------------------------------------------------
# Install targets. This will install the demo files into the
# root file system.

INSTALL (FILES
   ${CMAKE_CURRENT_BINARY_DIR}/chem_types.h
   DESTINATION "include/opencog/example/demo-types"
)

INSTALL (FILES
   ${CMAKE_CURRENT_BINARY_DIR}/chem_types.scm
   DESTINATION "${GUILE_SITE_DIR}/opencog/example/"
)

