#
# OpenCogGenOCamlTypes.cmake
#
# Definitions for automatically building the OCaml `atom_types.ml`
# file, given a master file `atom_types.script`.
#
# Example usage:
# OPENCOG_OCAML_ATOMTYPES(atom_types.script core_types.ml)
#
# ===================================================================

MACRO(OPENCOG_OCAML_SETUP OCAML_FILE WRAPPER_FILE)
	IF (NOT OCAML_FILE)
		MESSAGE(FATAL_ERROR "OPENCOG_OCAML_ATOMTYPES missing OCAML_FILE")
	ENDIF (NOT OCAML_FILE)

	MESSAGE(DEBUG "Generating OCaml Atom Type definitions from ${SCRIPT_FILE}.")

	FILE(WRITE "${OCAML_FILE}"
		"#\n"
		"# DO NOT EDIT THIS FILE! This file was automatically\n"
		"# generated from atom definitions in\n"
		"# ${SCRIPT_FILE}\n"
		"# by the macro OPENCOG_OCAML_ATOMTYPES\n"
		"#\n"
		"# This file contains basic OCaml wrappers for atom creation.\n"
		"#\n"
		"type atom = Node | Link ;;\n"
	)

	FILE(WRITE "${WRAPPER_FILE}"
		"//\n"
		"// DO NOT EDIT THIS FILE! This file was automatically\n"
		"// generated from atom definitions in\n"
		"// ${SCRIPT_FILE}\n"
		"// by the macro OPENCOG_OCAML_ATOMTYPES\n"
		"//\n"
		"// This file contains basic OCaml wrappers for atom creation.\n"
		"//\n"
		"#include <caml/mlvalues.h>\n"
		"#include <opencog/atoms/atom_types/atom_types.h>\n"
		"#include <opencog/ocaml/CamlWrap.h>\n"
		"\n"
	)
ENDMACRO(OPENCOG_OCAML_SETUP OCAML_FILE)

# Print out the scheme definitions
MACRO(OPENCOG_OCAML_WRITE_DEFS OCAML_FILE WRAPPER_FILE)

	# The function that returns the integer type of the type.
	# Not needed right now, comment out.
	# FILE(APPEND "${OCAML_FILE}"
	#	"external ${LC_SNAKE_TYPE}_atomtype : unit -> int = ${TYPE_NAME}Type ;;\n"
	# )
	#
	# FILE(APPEND "${WRAPPER_FILE}"
	#	"CAMLprim value  ${TYPE_NAME}Type(void) {"
	#	" return Val_long(${TYPE}); } \n"
	# )

	# Use short names, whenever possible. There are no backwards-compat
	# issues here with the long names.
	SET(ML_NAME ${LC_SNAKE_TYPE})
	IF (NOT LC_SNAKE_SHORT STREQUAL "")
		SET(ML_NAME ${LC_SNAKE_SHORT})
	ENDIF ()

	IF (ISVALUE STREQUAL "VALUE" OR ISSTREAM STREQUAL "STREAM")
		FILE(APPEND "${OCAML_FILE}"
			"external ${ML_NAME} : unit -> atom = new_${TYPE_NAME} ;;\n"
		)
	ENDIF ()

	IF (ISNODE STREQUAL "NODE")
		FILE(APPEND "${OCAML_FILE}"
			"external ${ML_NAME} : string -> atom = new_${TYPE_NAME} ;;\n"
		)
		FILE(APPEND "${WRAPPER_FILE}"
			"CAMLprim value  new_${TYPE_NAME}(value vname) {\n"
			"    const char* name = String_val(vname);\n"
			"    return NewNode(${TYPE}, name);\n"
			"} \n"
		)
	ENDIF ()

	IF (ISLINK STREQUAL "LINK")
		FILE(APPEND "${OCAML_FILE}"
			"external ${ML_NAME} : list atom -> atom = new_${TYPE_NAME} ;;\n"
		)
		FILE(APPEND "${WRAPPER_FILE}"
			"CAMLprim value  new_${TYPE_NAME}(value vatomlist) {\n"
			"    size_t len = Wosize_val(vatomlist);\n"
			"    HandleSeq oset;\n"
			"    for(size_t n=0; n<len; n++) {\n"
			"        Handle h(HandleCast(value_to_tag(Field(vatomlist, n))));\n"
			"        oset.emplace_back(h);\n"
			"    }\n"
			"    return NewLink(${TYPE}, oset);\n"
			"} \n"
		)
	ENDIF ()

	IF (ISATOMSPACE STREQUAL "ATOMSPACE")
		FILE(APPEND "${OCAML_FILE}"
			"(define-public AtomSpace cog-new-atomspace)\n"
		)
	ENDIF ()

	IF (ISAST STREQUAL "AST")
		FILE(APPEND "${OCAML_FILE}"
			"(define-public (${TYPE_NAME} . x)\n"
			"\t(apply cog-new-ast (cons ${TYPE_NAME}Type x)))\n"
		)
	ENDIF ()
ENDMACRO(OPENCOG_OCAML_WRITE_DEFS OCAML_FILE)

# ------------
# Main entry point.
MACRO(OPENCOG_OCAML_ATOMTYPES SCRIPT_FILE OCAML_FILE WRAPPER_FILE)

	OPENCOG_OCAML_SETUP(${OCAML_FILE} ${WRAPPER_FILE})
	FILE(STRINGS "${SCRIPT_FILE}" TYPE_SCRIPT_CONTENTS)
	FOREACH (LINE ${TYPE_SCRIPT_CONTENTS})
		OPENCOG_TYPEINFO_REGEX()
		IF (MATCHED AND CMAKE_MATCH_1)

			OPENCOG_TYPEINFO_SETUP()
			OPENCOG_OCAML_WRITE_DEFS(${OCAML_FILE} ${WRAPPER_FILE})
		ELSEIF (NOT MATCHED)
			MESSAGE(FATAL_ERROR "Invalid line in ${SCRIPT_FILE} file: [${LINE}]")
		ENDIF ()
	ENDFOREACH (LINE)

ENDMACRO()

#####################################################################
