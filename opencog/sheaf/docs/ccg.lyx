#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{url} 
\usepackage{slashed}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "cmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Combinatory Categorial Grammar and Link Grammar
\end_layout

\begin_layout Author
Linas Vepstas
\end_layout

\begin_layout Date
13 July 2022
\end_layout

\begin_layout Abstract
This is a short, informal note explaining how Combinatory Categorial Grammar
\begin_inset CommandInset href
LatexCommand href
name "Combinatory Categorial Grammar"
target "https://en.wikipedia.org/wiki/Combinatory_categorial_grammar"
literal "false"

\end_inset

 and Link Grammar
\begin_inset CommandInset href
LatexCommand href
name "Link Grammar"
target "https://www.cs.cmu.edu/afs/cs.cmu.edu/project/link/pub/www/papers/ps/tr91-196.pdf"
literal "false"

\end_inset

 are equivalent.
\end_layout

\begin_layout Section*
An informal chat
\end_layout

\begin_layout Standard
@Adam asks: 
\emph on
Does anyone here know about 
\begin_inset Newline newline
\end_inset

https://en.wikipedia.org/wiki/Combinatory_categorial_grammar?
\emph default
 
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
(
\emph on
from Wikipedia
\emph default
) Combinatory categorial grammar (CCG) is an efficiently parsable, yet linguisti
cally expressive grammar formalism.
 It has a transparent interface between surface syntax and underlying semantic
 representation, including predicateâ€“argument structure, quantification
 and information structure.
 The formalism generates constituency-based structures (as...
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\emph on
I talked to its inventor last week (who has since moved on to do learning
 in linguistics) and it was really interesting â€” Today at 9:31 AM ážµážµ 
\end_layout

\begin_layout Standard
So, there's this thing about grammars you should know ðŸ™‚ CCG provides one
 example ...
 It seems like all the different grammar formalisms are inter-convertible
 into one-another, by purely algorithmic means.
 I failed to keep a reference to a nice paper that explained how to convert
 between DG and HPSG's and back, using some simple algo.
 I looked at CCG many years ago, and from what I could tell, for each and
 every CCG "(compound) type", one has an equivalent LG link type, and vice
 versa.
 So e.g.
 the compound type NP/N is the same thing as the LG D+ link (determiner)
 type and (S
\backslash
NP)/NP is the just the LG S- & O+ (verb taking subject and object) and you
 can march down the list this way.
 It's mildly confusing, because it seems like the compound type NP/N might
 be encoding some kind of structure that the single-letter, single-type
 D+ is not ...
 but, actually, no, that is incorrect.
 The CCG notation is not actually "more atomic" or "more compositional"
 than the LG notation.
 To understand this, a slight shift in point-of-view...
 This can be seen in a different way.
 Recall how I talk about "jigsaw pieces" all the time? So, look at that
 CCG wikipedia article, you see this: Image The above says "if you have
 a jigsaw called alpha and it has connector of type X on left and type Y
 on right, and if you have jigsaw beta with a connector Y, you can connect
 the two Y's together, to yield a combined jigsaw alphabeta having only
 one unconnected connector X." The > is the rule name which implicitly states
 that second Y is actually left-pointing.
 The horizontal bar is just conventional proof-theory notation for a rewrite
 rule (or inference rule).
 All inference rules are instructions on how to connect (or disconnect)
 jigsaw connectors.
 All proof-theoretical inference rules are always jigsaw pieces.
 All of them, without any exceptions, for any type of logic (not just CCG).
 This is "trivial" because its just a notational thing.
 Here's a more complex example: Image The article calls this a "Type-raising
 combinator".
 It just says that if you have a jigsaw piece called alpha, you can cut
 it into two different jigsaw pieces (but leave them assembled) having the
 internal jigsaw connector being of type T.
 The other rule: Image says "the same thing", except this time, the polarity
 of the jigsaw tab is reversed (the male/female tab markings on the jigsaw
 are swapped).
 You have two "type raising combinators" because there are two ways of creating
 complex types, with / and with 
\backslash
 and so (in CCG) the jigsaw connectors are hetero-sexual.
 (Jigsaws can be monosexual, trisexual, and all kinds of weird things in
 general).
 CCG only needs two, because of an old thing in linguistics about word-order
 in linear sentences.
 In conclusion: CCG is equivalent to LG.
 It uses a far more awkward notation (the proof-theoretical inference-bar
 notation).
 Awkwardness matters, because concepts like link-crossing and Dick Hudson's
 "landmark transitivity" becomes very hard to talk about in CCG.
 linas â€” Today at 10:16 AM The meta-lesson: jigsaws have types (the types
 of the connectors) and the connectors have "sexuality" (usually heterosexual,
 for most applications).
 linas â€” Today at 10:25 AM My quick-and-dirty critique of Ben's TrueAI/Hyperion/
MeTTA work is that they are just re-inventing lambda calculus and term unificati
on with a weird notation.
 The (= A B) is just a lambda.
 The problem here is that (a) lambdas are always heterosexual, and this
 prevents useful kinds of rewrites, and (b) lambdas cannot encompass many
 types of logics, e.g.
 the linear logics (aka the quantum logics), and any of the modal logics,
 any of the Kripke-Joyal systems.
 So they've painted themselves into a corner, before they've even gotten
 out of the gate.
 
\end_layout

\end_body
\end_document
