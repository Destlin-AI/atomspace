#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{url} 
\usepackage{slashed}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "cmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Combinatory Categorial Grammar and Link Grammar
\end_layout

\begin_layout Author
Linas Vepstas
\end_layout

\begin_layout Date
13 July 2022
\end_layout

\begin_layout Abstract
This is a short, informal note explaining how 
\begin_inset CommandInset href
LatexCommand href
name "Combinatory Categorial Grammar"
target "https://en.wikipedia.org/wiki/Combinatory_categorial_grammar"
literal "false"

\end_inset

 (CCG) and 
\begin_inset CommandInset href
LatexCommand href
name "Link Grammar"
target "https://www.cs.cmu.edu/afs/cs.cmu.edu/project/link/pub/www/papers/ps/tr91-196.pdf"
literal "false"

\end_inset

 (LG) are equivalent.
 Covers basic ideas from proof theory, type theory, and the 
\begin_inset Quotes eld
\end_inset

sexuality
\begin_inset Quotes erd
\end_inset

 of type combinators.
 The key idea is that type theory must be combined with connector sexuality
 in order to get a fully general framework encompassing proof theory and
 inference in logic.
\end_layout

\begin_layout Section*
A Question posed on a Discord chat channel
\end_layout

\begin_layout Standard
@Adam asks: 
\emph on
Does anyone here know about 
\begin_inset Newline newline
\end_inset

https://en.wikipedia.org/wiki/Combinatory_categorial_grammar?
\emph default
 
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
(
\emph on
from Wikipedia
\emph default
) Combinatory categorial grammar (CCG) is an efficiently parsable, yet linguisti
cally expressive grammar formalism.
 It has a transparent interface between surface syntax and underlying semantic
 representation, including predicate–argument structure, quantification
 and information structure.
 The formalism generates constituency-based structures (as...
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\emph on
I talked to its inventor last week (who has since moved on to do learning
 in linguistics) and it was really interesting — Today at 9:31 AM 
\end_layout

\begin_layout Section*
The reply
\end_layout

\begin_layout Standard
To open, there's this thing about grammars that you should know.
 
\end_layout

\begin_layout Standard
As far as I can tell, all of the different (formal) grammar formalisms are
 inter-convertible into one-another, by purely algorithmic means.
 That is, given the collection of symbols and rules that are used to define
 one formalism (
\emph on
e.g.

\emph default
 HPSG) one can convert that into a different formalism (
\emph on
e.g.

\emph default
 DG) by applying a purely automatic transformation.
\end_layout

\begin_layout Standard
Somewhere, there is a nice paper that explains how to convert between DG
 and HPSG and back.
 It provides a simple algo to do this.
 Sadly, I have misplaced the reference.
\end_layout

\begin_layout Subsection*
CCG is Equivalent to LG
\end_layout

\begin_layout Standard
I looked at CCG many years ago, and from what I could tell, for each and
 every CCG compound type, one has an equivalent LG link type, and 
\emph on
vice versa
\emph default
.
 For example, the compound type 
\family sans
\shape italic
NP/N
\family default
\shape default
 is the same thing as the LG 
\family typewriter
\size large
D+
\family default
\size default
 link (determiner) type and 
\family sans
\shape italic
(S
\backslash
NP)/NP
\family default
\shape default
 is the just the LG 
\family typewriter
\size large
S- & O+
\family default
\size default
 (verb taking subject and object) and one can march down the list this way.
 
\end_layout

\begin_layout Standard
At first, it's mildly confusing, because it seems like the compound type
 
\family sans
\shape italic
NP/N
\family default
\shape default
 might be encoding some kind of structure that the single-letter, single-type
 
\family typewriter
\size large
D+
\family default
\size default
 is not ...
 but, actually, no, that is incorrect.
 The CCG notation is not actually "more atomic" or "more compositional"
 than the LG notation.
 To understand this, one must slightly shift one's point-of-view.
\end_layout

\begin_layout Subsection*
Jigsaw Pieces
\end_layout

\begin_layout Standard
\align block
Recall how I talk about "jigsaw pieces" all the time? Some example LG jigsaw
 pieces:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/link-grammar.png
	lyxscale 60
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
Now, look at that CCG Wikipedia article, you see this inference rule:
\begin_inset Formula 
\[
\frac{\alpha:X/Y\quad\beta:Y}{\alpha\beta:X}>
\]

\end_inset


\end_layout

\begin_layout Standard
This says that (roughly speaking) "if you have a jigsaw called alpha and
 it has connector of type 
\begin_inset Formula $X$
\end_inset

 on left and type 
\begin_inset Formula $Y$
\end_inset

 on right, and if you have jigsaw beta with a connector 
\begin_inset Formula $Y$
\end_inset

, you can connect the two 
\begin_inset Formula $Y$
\end_inset

's together, to yield a combined jigsaw alphabeta having only one unconnected
 connector 
\begin_inset Formula $X$
\end_inset

." 
\end_layout

\begin_layout Standard
Lets now try to be more precise.
 This inference rule uses conventional proof-theory style notation.
 The horizontal line is the defines the inference to be done.
 Above the line are the inputs, below the line are the outputs.
 The greek letters 
\begin_inset Formula $\alpha,\beta$
\end_inset

 are terms, and the roman letters 
\begin_inset Formula $X,Y$
\end_inset

 are types.
 The colon indicates a term-type pairing, so that 
\begin_inset Formula $\beta:Y$
\end_inset

 is a term of type 
\begin_inset Formula $Y$
\end_inset

.
 The slash 
\begin_inset Formula $/$
\end_inset

 and the backslash 
\begin_inset Formula $\backslash$
\end_inset

 are type constructors, so that 
\begin_inset Formula $X,Y$
\end_inset

 are simple types, and 
\begin_inset Formula $X/Y$
\end_inset

 is a compound type, constructed from the two simpler types.
 The 
\begin_inset Formula $>$
\end_inset

 is just a label for the rule; it has no syntactic role.
\end_layout

\begin_layout Standard
The Wikipedia article calls these inference rules 
\begin_inset Quotes eld
\end_inset

combinators
\begin_inset Quotes erd
\end_inset

.
 Above is one 
\begin_inset Quotes eld
\end_inset

application combinator
\begin_inset Quotes erd
\end_inset

; there is also a second rule: 
\begin_inset Formula 
\[
\frac{\beta:Y\quad\alpha:X\backslash Y}{\beta\alpha:X}<
\]

\end_inset


\end_layout

\begin_layout Standard
Lets rewrite these two rewrite rules in LG notation.
 They would be
\begin_inset Formula 
\[
\frac{\alpha:\left(X\!\!*\;\;\&\;\;Y\!+\right)\quad\beta:Y\!-}{\alpha\beta:X\!*}>
\]

\end_inset

and 
\begin_inset Formula 
\[
\frac{\beta:Y\!+\quad\alpha:\left(X\!\!*\;\;\&\;\;Y\!-\right)}{\beta\alpha:X\!*}<
\]

\end_inset

Here, the 
\begin_inset Formula $X,Y$
\end_inset

 are the LG types, called 
\begin_inset Quotes eld
\end_inset

link types
\begin_inset Quotes erd
\end_inset

 in the literature.
 The 
\begin_inset Formula $Y\!+$
\end_inset

 and 
\begin_inset Formula $Y\!-$
\end_inset

 are called 
\begin_inset Quotes eld
\end_inset

connectors
\begin_inset Quotes erd
\end_inset

: they are jigsaw-puzzle-piece tabs, as-yet unconnected.
 When they do connect, they are called a 
\begin_inset Quotes eld
\end_inset

link
\begin_inset Quotes erd
\end_inset

, and thus the name 
\begin_inset Quotes eld
\end_inset

Link Grammar
\begin_inset Quotes erd
\end_inset

.
 The 
\begin_inset Formula $+$
\end_inset

 and 
\begin_inset Formula $-$
\end_inset

 are the 
\begin_inset Quotes eld
\end_inset

connector directions
\begin_inset Quotes erd
\end_inset

: they specify in which direction a connector can connect: to the right
 or to the left.
 The 
\begin_inset Formula $*$
\end_inset

 is a directional wild-card, saying that 
\begin_inset Formula $X\!*$
\end_inset

 can be either 
\begin_inset Formula $X\!+$
\end_inset

 or 
\begin_inset Formula $X\!-$
\end_inset

.
 This just helps us write only two inference rules, instead of four of them.
\end_layout

\begin_layout Standard
So what are these two inference rules really saying? Well, its almost trivial:
 they're just saying 
\begin_inset Quotes eld
\end_inset

connectable connectors can connect, if the connector types are identical,
 and the sexuality of the connectors is opposite.
\begin_inset Quotes erd
\end_inset

 Let's cement the obvious.
 Here's the first inference rule, in pictures: 
\end_layout

\begin_layout Standard
xxxx
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $>$
\end_inset

 label is the rule name which implicitly states that second Y is actually
 left-pointing.
 The horizontal bar is just conventional proof-theory notation for a rewrite
 rule (or inference rule).
 All inference rules are instructions on how to connect (or disconnect)
 jigsaw connectors.
 All proof-theoretical inference rules are always jigsaw pieces.
 All of them, without any exceptions, for any type of logic (not just CCG).
 This is "trivial" because its just a notational thing.
 
\end_layout

\begin_layout Standard
Here's a more complex example: Image The article calls this a "Type-raising
 combinator".
 It just says that if you have a jigsaw piece called alpha, you can cut
 it into two different jigsaw pieces (but leave them assembled) having the
 internal jigsaw connector being of type T.
 The other rule: Image says "the same thing", except this time, the polarity
 of the jigsaw tab is reversed (the male/female tab markings on the jigsaw
 are swapped).
 You have two "type raising combinators" because there are two ways of creating
 complex types, with / and with 
\backslash
 and so (in CCG) the jigsaw connectors are hetero-sexual.
 (Jigsaws can be monosexual, trisexual, and all kinds of weird things in
 general).
 CCG only needs two, because of an old thing in linguistics about word-order
 in linear sentences.
 In conclusion: CCG is equivalent to LG.
 It uses a far more awkward notation (the proof-theoretical inference-bar
 notation).
 Awkwardness matters, because concepts like link-crossing and Dick Hudson's
 "landmark transitivity" becomes very hard to talk about in CCG.
 linas — Today at 10:16 AM The meta-lesson: jigsaws have types (the types
 of the connectors) and the connectors have "sexuality" (usually heterosexual,
 for most applications).
 linas — Today at 10:25 AM My quick-and-dirty critique of Ben's TrueAI/Hyperion/
MeTTA work is that they are just re-inventing lambda calculus and term unificati
on with a weird notation.
 The (= A B) is just a lambda.
 The problem here is that (a) lambdas are always heterosexual, and this
 prevents useful kinds of rewrites, and (b) lambdas cannot encompass many
 types of logics, e.g.
 the linear logics (aka the quantum logics), and any of the modal logics,
 any of the Kripke-Joyal systems.
 So they've painted themselves into a corner, before they've even gotten
 out of the gate.
 
\end_layout

\end_body
\end_document
